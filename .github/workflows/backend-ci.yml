name: 'Backend ci'

on: 
  push:
    branches:   
      - master
    paths: 
      - 'backend/**'

jobs:
  build-code:     
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 17.8.0
      uses: actions/setup-node@v3
      with:
        node-version: '17.8.0'

    - name: Build code
      run: yarn build:backend
  
  determine-images:
    name: "Determine images to build"
    needs: build-code
    runs-on: ubuntu-latest
    outputs:
      some: ${{ steps.builds.outputs.some }}
      auth: ${{ steps.builds.outputs.auth }}
      catalogue: ${{ steps.builds.outputs.catalogue }}
      users: ${{ steps.builds.outputs.users }}
      ugc: ${{ steps.builds.outputs.ugc }}
      search: ${{ steps.builds.outputs.search }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get changed files
      id: getfile
      run: |
        echo "::set-output name=files::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }}| xargs)"

    - name: Determine builds
      id: builds
      run: |
        setOutput () { 
          echo "::set-output name=$1::true"
          echo "::set-output name=some::true"
        }

        set_auth () { 
          setOutput auth
        }
        set_catalogue () { 
          setOutput catalogue;
        }
        set_ugc () { 
          setOutput ugc
        }
        set_users () { 
          setOutput users
        }
        set_search () { 
          setOutput search
        }

        auth () {
          if [[ $1 == *"backend/apps/auth"* ]]; then 
            set_auth 
          fi
        }

        catalogue () {
          if [[ $1 == *"backend/apps/catalogue"* ]]; then 
            set_catalogue 
          fi        
        }

        ugc () {
          if [[ $1 == *"backend/apps/ugc"* ]]; then 
            set_ugc 
          fi        
        }

        users () {
          if [[ $1 == *"backend/apps/users"* ]]; then 
            set_users 
          fi        
        }

        search () {
          if [[ $1 == *"backend/apps/search"* ]]; then 
            set_search 
          fi        
        }

        for i in ${{ steps.getfile.outputs.files }}
        do
          if [[ $i == *"backend/packages/"* ]]; then
            set_auth
            set_catalogue
            set_ugc
            set_users
            set_search

            break
          fi

          auth $i
          catalogue $i
          ugc $i
          users $i
          search $i
        done

  build-push-auth-image:
    name: "Build and push auth Docker image"
    needs: determine-images
    runs-on: ubuntu-latest
    if: ${{ needs.determine-images.outputs.auth }}
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with: 
        username: ${{ secrets.DH_USERNAME }}
        password: ${{ secrets.DH_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: "{{defaultContext}}:backend"
        build-args: SCOPE=backend-auth
        push: true
        tags: veetik/ecommerce-project-b-auth:latest

  build-push-catalogue-image:
    name: "Build and push catalogue Docker image"
    needs: determine-images
    runs-on: ubuntu-latest
    if: ${{ needs.determine-images.outputs.catalogue }}
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with: 
        username: ${{ secrets.DH_USERNAME }}
        password: ${{ secrets.DH_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: "{{defaultContext}}:backend"
        build-args: SCOPE=backend-catalogue
        push: true
        tags: veetik/ecommerce-project-b-catalogue:latest

  build-push-ugc-image:
    name: "Build and push ugc Docker image"
    needs: determine-images
    runs-on: ubuntu-latest
    if: ${{ needs.determine-images.outputs.ugc }}
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with: 
        username: ${{ secrets.DH_USERNAME }}
        password: ${{ secrets.DH_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: "{{defaultContext}}:backend"
        build-args: SCOPE=backend-ugc
        push: true
        tags: veetik/ecommerce-project-b-ugc:latest
  
  build-push-users-image:
    name: "Build and push users Docker image"
    needs: determine-images
    runs-on: ubuntu-latest
    if: ${{ needs.determine-images.outputs.users }}
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with: 
        username: ${{ secrets.DH_USERNAME }}
        password: ${{ secrets.DH_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: "{{defaultContext}}:backend"
        build-args: SCOPE=backend-users
        push: true
        tags: veetik/ecommerce-project-b-users:latest
    
  build-push-search-image:
    name: "Build and push search Docker image"
    needs: determine-images
    runs-on: ubuntu-latest
    if: ${{ needs.determine-images.outputs.search }}
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with: 
        username: ${{ secrets.DH_USERNAME }}
        password: ${{ secrets.DH_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: "{{defaultContext}}:backend"
        build-args: SCOPE=backend-search
        push: true
        tags: veetik/ecommerce-project-b-search:latest

